{
  "0": {
    "id": "0",
    "title": "Realtime Database Android (Java)",
    "content": "Realtime Database Android (Java)Contents  Create  Read  Update  DeleteAdditional classes and pre-defined variablesOther than the example from README.md, we’ll also use the following classes:  User  GroupChatAnd the following variables:DatabaseReference rootRef = FirebaseDatabase.getInstance().getReference();DatabaseReference usersRef = rootRef.child(&quot;users&quot;);CreateOn the Realtime Database, each object needs to be stored under a key. This key should identify the object uniquely in the database. You can think of this key as the Primary Key on a SQL Table. If you already know the key beforehand, you can use:SQL:INSERT INTO users (id, fullname, email, age, city) VALUES (2, 'Joana', 'joana@email.com', 21, 'Maputo');Firebase:User newUser = new User(2, &quot;Joana&quot;, &quot;joana@email.com&quot;, 21, &quot;Maputo&quot;);String key = &quot;2&quot;;usersRef.child(key).setValue(newUser);Or if you want this key to be automatically generated:SQL:(Assuming you’ve enabled auto-increment in that table)INSERT INTO User (name, email, age, city) VALUES ('Joana', 'joana@email.com', 21, 'Maputo');Firebase:User newUser = new User(2, &quot;Joana&quot;, &quot;joana@email.com&quot;, 21, &quot;Maputo&quot;);String key = usersRef.push().getKey();usersRef.child(key).setValue(newUser);Note that this generates a random key (like “-JhQ76OEK_848CkIFhAq” for example). Learn about how these keys are generated here.ReadThis is the part where it gets tricky. That’s because in SQL development, the data structure is independent from theviews. Which means you can design your view not worrying about how the database is structured and vice-versa.Now in the Realtime Database, things don’t work that way. Yo need to STRUCTURE YOUR DATA AFTER YOUR VIEW. This means that your structure may vary depending on how you want to display your data. That’s why we have a few  different examples bellow.You should also know that in order to read data, Firebase makes use of Listeners. Check the Firebase Documentation to know more about the different listeners and the difference between Value Event Listeners and Child Event Listeners to know more about it. Please note that some examples in this guide might omit the listener.Finally, refer to Sorting and Filtering Data to understand our examples about querying, sorting and filtering data on the Realtime Database.Read all usersPlease note that this is not recommended, because if this node contains a large number of users, it might use a lot of bandwidth, memory and battery.SQL:SELECT * FROM users;Firebase:usersRef.addValueEventListener(new ValueEventListener() {    @Override    public void onDataChange(DataSnapshot dataSnapshot) {        // Here, dataSnapshot contains all the users.        // We can then iterate through it to get each one of them        // and maybe add them to a Collection like List or ArrayList        for (DataSnapshot snap : dataSnapshot.getChildren()) {            User user = snap.getValue(User.class);            // ...        }            }        @Override    public void onCancelled(DatabaseError databaseError) {        // Getting Users failed, log a message        Log.w(TAG, databaseError.toException());    }});Read a single userSQL:SELECT * FROM users WHERE id = 2;Firebase:If you know the user’s key, you can call use the child() method:usersRef.child(&quot;-JhQ76OEK_848CkIFhAq&quot;).addValueEventListener(new ValueEventListener() {    @Override    public void onDataChange(DataSnapshot dataSnapshot) {        // Here, dataSnapshot contains only the user we have specified,        // thus there's no need to iterate anything        User user = snap.getValue(User.class);            }        @Override    public void onCancelled(DatabaseError databaseError) {        // Getting User failed, log a message        Log.w(TAG, databaseError.toException());    }});Find a user by emailSQL:SELECT * FROM users WHERE email = &quot;joana@email.com&quot;;Firebase:usersRef.orderByChild(&quot;email&quot;).equalTo(&quot;joana@email.com&quot;);Please note that while this was supposed to return a single user, it actually returns a list containing 1 user, thus you’ll need to either iterate through the DataSnapshot or get the user at index 0 from the list.Read 5 users from a specific citySQL:SELECT * FROM users WHERE city = &quot;Maputo&quot; LIMIT 5;Firebase:Limit to the first 5 results:usersRef.orderByChild(&quot;city&quot;).equalTo(&quot;Maputo&quot;).limitToFirst(5);Limit to the last 5 results:usersRef.orderByChild(&quot;city&quot;).equalTo(&quot;Maputo&quot;).limitToLast(5);Find users who are not older than 18 yearsSQL:SELECT * FROM users WHERE age &amp;lt; 18;Firebase:usersRef.orderByChild(&quot;age&quot;).endAt(17);The example above finds the users who’s age is less than 18. If you’d like to find the users who’s age is greater than or equal to 18, you’d use:usersRef.orderByChild(&quot;age&quot;).startAt(18);Find users who are between 30 and 60 years oldSQL:SELECT * FROM users WHERE age &amp;gt;= 30 AND age &amp;lt;= 60;Firebase:usersRef.orderByChild(&quot;age&quot;).startAt(30).endAt(60);Find users who are 21 years old and live in a specific citySQL:SELECT * FROM users WHERE age = 21 AND city = &quot;Maputo&quot;;Firebase:After seeing the previous queries, you might think this can be done by putting together orderByChild(&quot;city&quot;) and orderByChild(&quot;age&quot;). Sorry to disappoint you, but the Realtime Database does not let you chain orderByChild() methods.As a workaround, you can add a new attribute to the database (and a new property to the User class), let’s say age_city. Then it’s value would be composed by “[age]_[city]” (e.g. “19_Maputo” or “30_Beira”). So than we can run the query:usersRef.orderByChild(&quot;age_city&quot;).equalTo(&quot;21_Maputo&quot;);UpdateChanging the user’s name from “Joana” to “John”:SQL:UPDATE TABLE users SET fullname = 'John' WHERE id = 2;Firebase:You can either overwrite the previous name:usersRef.child(2).child(&quot;fullname&quot;).setValue(&quot;John&quot;);Or update the object and overwrite it:newUser.setFullname(&quot;John&quot;);usersRef.child(2).setValue(newUser);DeleteSQL:DELETE FROM users WHERE id = 2;Firebase:Either overwrite the object with null:usersRef.child(2).setValue(null);Or call removeValue():usersRef.child(2).removeValue();",
    "url": "http://localhost:4000/database/java-android/",
    "relUrl": "/database/java-android/"
  },
  "1": {
    "id": "1",
    "title": "Realtime Database",
    "content": "Realtime DatabaseContents  Java (Android)  Kotlin (Android)",
    "url": "http://localhost:4000/database/",
    "relUrl": "/database/"
  },
  "2": {
    "id": "2",
    "title": "From SQL to Firebase",
    "content": "[WIP] From SQL to FirebaseSimple guide to help SQL developers understand how to use Firebase.This guide contains most SQL queries and it’s Firebase equivalent.Contents  Cloud Firestore          Java (Android)      Kotlin (Android)        Realtime Database          Java (Android)      Kotlin (Android)      Our ExampleTo help you understand Firebase, we’ll be using a SQL Database containing 3 tables: Users, GroupChats and Participants.The Users table contains the users registered on our app. For each user, we’ll register their: id, full name, email, age and city name.The GroupChats table contains a list of group chats created on the app. For each of them, we’ll need to know their: id, name and short description.The Participants table establishes the relation between users and group chats. It should show what groups each user participates in and which users are participating in each group. This table contains the attributes: userId and groupId.Available Languages  English  PortugueseContributingContributions are welcome! Please read our guidelines to know how to contribute.AcknowledgementsThis project was inspired by and based on:  Firebase Database for SQL Developers Youtube video series presented by David East;  Firebase Database para Desenvolvedores SQL blog posts by Rosário P. Fernandes;  Various answers from #AskFirebase and StackOverflow.LICENSEThis project is licensed under the MIT License - see the license file for details.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
}
